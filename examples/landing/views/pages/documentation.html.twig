{% extends 'base.html.twig' %}

{% block link_class_documentation %}active{% endblock %}

{% block app_container %}
    <section id='documentation'>
        <div class='panel-body'>
            <h3 id='root-object' class='documentation-singleton'>ColorMix</h3>
            <ul id='colormix'>
                <li class='documentation-class collapsed'>
                    <h6 data-toggle='collapse' data-target='#colormix-color' data-parent='#documentation'>Color(R, G, B) - Create and manipulate a Color object</h6>
                    <div id='colormix-color' class='collapse'>
                        <h6>Public properties</h6>
                        <ul>
                            <li class='documentation-property collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-red' data-parent='#colormix-color'>red</span>
                                <div id='documentation-red' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> <span class='documentation-type'>Integer</span> - The red value of the color [0 - 255]</p>
                                </div>
                            </li>
                            <li class='documentation-property collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-green' data-parent='#colormix-color'>green</span>
                                <div id='documentation-green' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> <span class='documentation-type'>Integer</span> - The green value of the color [0 - 255]</p>
                                </div>
                            </li>
                            <li class='documentation-property collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-blue' data-parent='#colormix-color'>blue</span>
                                <div id='documentation-blue' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> <span class='documentation-type'>Integer</span> - The blue value of the color [0 - 255]</p>
                                </div>
                            </li>
                        </ul>
                        <h6>Constructor</h6>
                        <ul>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-color-constructor' data-parent='#colormix-color'>Color(R, G, B)</span>
                                <div id='documentation-color-constructor' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Set the RGB properties from the integer values R, G and B.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - red value to set: [0 - 255]</li>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - green value to set: [0 - 255]</li>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - blue value to set: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var color = new ColorMix.Color(255, 255, 255); // ColorMix.Color { red: 255, green: 255, blue: 255 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> You can also choose an hex string as first parameter and ignore the other ones!.</div>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var color = new ColorMix.Color('#FFFFFF'); // ColorMix.Color { red: 255, green: 255, blue: 255 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> If you do not provide any parameter, the color will be initialized with a 0 - range for each property (equivalent to black).</div>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                        </ul>
                        <h6>Public methods</h6>
                        <ul>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-fromHex'>fromHex(hexString)</span>
                                <div id='documentation-fromHex' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Set the RGB properties from an hexadecimal String.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>hexString</span> (<span class='documentation-argument-type'>String</span>) - hexString to set: ['(#)RRGGBB', '(#)RGB']</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var color = new ColorMix.Color().fromHex('#FFFFFF'); // ColorMix.Color { red: 255, green: 255, blue: 255 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid Hex values will be replaced by 0.</div>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-getRed'>getRed()</span>
                                <div id='documentation-getRed' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Getter - returns the red value of the color</p>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var red = new ColorMix.Color(255, 255, 255).getRed();</pre>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-setRed'>setRed(R)</span>
                                <div id='documentation-setRed' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Setter - set the red value for a color, and returns the color instance.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - red value to set: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var red = new ColorMix.Color(255, 255, 255).setRed(0);</pre>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-getGreen'>getGreen()</span>
                                <div id='documentation-getGreen' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Getter - returns the green value of the color</p>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var green = new ColorMix.Color(255, 255, 255).getGreen();</pre>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-setGreen'>setGreen(G)</span>
                                <div id='documentation-setGreen' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Setter - set the green value for a color, and returns the color instance.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - green value to set: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var green = new ColorMix.Color(255, 255, 255).setGreen(0);</pre>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-getBlue'>getBlue()</span>
                                <div id='documentation-getBlue' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Getter - returns the blue value of the color
                                    <pre class='prettyprint linenums' class='documentation-example'>var blue = new ColorMix.Color(255, 255, 255).getBlue();</pre>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-setBlue'>setBlue(B)</span>
                                <div id='documentation-setBlue' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Setter - set the blue value for a color, and returns the color instance.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - blue value to set: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var blue = new ColorMix.Color(255, 255, 255).setBlue(0);</pre>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-toString'>toString(mode)</span>
                                <div id='documentation-toString' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Format the color for a given mode. Returns a string representation of the color.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>mode</span> (<span class='documentation-argument-type'>String</span>) - format mode: ['hex', 'rgb', 'rgba', 'hsl', 'hsla']</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var colorName = new ColorMix.Color(255, 255, 255).toString('rgb'); // colorName = rgb(255, 255, 255);</pre>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-useAsBackground'>useAsBackground(selector)</span>
                                <div id='documentation-useAsBackground' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Set this color as CSS background-color for a given selector. Returns the colors instance.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>selector</span> (<span class='documentation-argument-type'>String</span>) - element selector: ['#(id)', '.(class)', '(tag)']</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var colorName = new ColorMix.Color(255, 255, 255).useAsBackground('body'); // &lt;body&gt;.style.backgroundColor = rgb(255, 255, 255);</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> Without jQuery, it may not works for some complex selectors like tag#id or tag.class.</div>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-useAsColor'>useAsColor(selector)</span>
                                <div id='documentation-useAsColor' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Set this color as CSS color for a given selector. Returns the colors instance.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument'><span class='documentation-argument-name'>selector</span> (<span class='documentation-argument-type'>String</span>) - element selector: ['#(id)', '.(class)', '(tag)']</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var colorName = new ColorMix.Color(255, 255, 255).useAsColor('body'); // &lt;body&gt;.style.color = rgb(255, 255, 255);</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> Without jQuery, it may not works for some complex selectors like tag#id or tag.class.</div>
                                    <div class='documentation-tags'><i class='icon icon-tags'></i> Chainable</div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </li>
                <li class='documentation-singleton collapsed'>
                    <h6 data-toggle='collapse' data-target='#colormix-colorspace'>ColorSpace - Convert colors from a color space to another one</h6>
                    <div id='colormix-colorspace' class='collapse'>
                        <h6>Public methods</h6>
                        <ul>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-RGB'>RGB(R, G, B)</span>
                                <div id='documentation-RGB' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Create and returns an RGB-color object</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - red value to set: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - green value to set: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - blue value to set: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var RGB = new ColorMix.ColorSpace.RGB(255, 255, 255); // { red: 255, green: 255, blue: 255 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-XYZ'>XYZ(X, Y, Z)</span>
                                <div id='documentation-XYZ' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Create and returns an XYZ-color object</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>X</span> (<span class='documentation-argument-type'>Float</span>) - X value to set</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Y</span> (<span class='documentation-argument-type'>Float</span>) - Y value to set</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Z</span> (<span class='documentation-argument-type'>Float</span>) - Z value to set</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var XYZ = new ColorMix.ColorSpace.XYZ(0, 0, 0); // { x: 0, y: 0, z: 0 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-HSL'>HSL(H, S, L)</span>
                                <div id='documentation-HSL' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Create and returns an HSL-color object</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>H</span> (<span class='documentation-argument-type'>Integer</span>) - H value to set: [0 - 360]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>S</span> (<span class='documentation-argument-type'>Integer</span>) - S value to set: [0 - 100]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>L</span> (<span class='documentation-argument-type'>Integer</span>) - L value to set: [0 - 100]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var HSL = new ColorMix.ColorSpace.HSL(360, 100, 100); // { hue: 360, sat: 100, lig: 100 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-Lab'>Lab(L, a, b)</span>
                                <div id='documentation-Lab' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Create and returns an Lab-color object</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>L</span> (<span class='documentation-argument-type'>Float</span>) - L value to set: [0 - 100]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>a</span> (<span class='documentation-argument-type'>Float</span>) - a value to set</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>b</span> (<span class='documentation-argument-type'>Float</span>) - b value to set</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var Lab = new ColorMix.ColorSpace.Lab(100, 0, 0); // { L: 100, a: 0, b: 0 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-RGBtoXYZ'>RGBtoXYZ(R, G, B)</span>
                                <div id='documentation-RGBtoXYZ' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a RGB color to a XYZ one and returns a XYZ-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - R value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - G value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - B value to convert: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var XYZ = new ColorMix.ColorSpace.RGBtoXYZ(255, 255, 255); // { x: 95, y: 100, z: 108 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-RGBtoHSL'>RGBtoHSL(R, G, B)</span>
                                <div id='documentation-RGBtoHSL' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a RGB color to a HSL one and returns a HSL-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - R value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - G value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - B value to convert: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var HSL = new ColorMix.ColorSpace.RGBtoHSL(255, 255, 255); // { hue: 0, sat: 0, lig: 100 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-RGBtoHSL'>RGBtoLab(R, G, B)</span>
                                <div id='documentation-RGBtoLab' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a RGB color to a Lab one and returns a Lab-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>R</span> (<span class='documentation-argument-type'>Integer</span>) - R value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>G</span> (<span class='documentation-argument-type'>Integer</span>) - G value to convert: [0 - 255]</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>B</span> (<span class='documentation-argument-type'>Integer</span>) - B value to convert: [0 - 255]</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var Lab = new ColorMix.ColorSpace.RGBtoLab(255, 255, 255); // { L: 100, a: 0, b: 0 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-XYZtoRGB'>XYZtoRGB(X, Y, Z)</span>
                                <div id='documentation-XYZtoRGB' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a XYZ color to a RGB one and returns a RGB-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>X</span> (<span class='documentation-argument-type'>Float</span>) - X value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Y</span> (<span class='documentation-argument-type'>Float</span>) - Y value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Z</span> (<span class='documentation-argument-type'>Float</span>) - Z value to convert</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var RGB = new ColorMix.ColorSpace.XYZtoRGB(50, 50, 50); // { red: 204, green: 183, blue: 180 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-XYZtoLab'>XYZtoLab(X, Y, Z)</span>
                                <div id='documentation-XYZtoLab' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a XYZ color to a Lab one and returns a Lab-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>X</span> (<span class='documentation-argument-type'>Float</span>) - X value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Y</span> (<span class='documentation-argument-type'>Float</span>) - Y value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>Z</span> (<span class='documentation-argument-type'>Float</span>) - Z value to convert</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var Lab = new ColorMix.ColorSpace.XYZtoLab(50, 50, 50); // { L: 76.06926101415557, a: 6.777038667061586, b: 4.4398523641493215 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-LabtoRGB'>LabtoRGB(L, a, b)</span>
                                <div id='documentation-LabtoRGB' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a XYZ color to a Lab one and returns a Lab-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>L</span> (<span class='documentation-argument-type'>Float</span>) - L value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>a</span> (<span class='documentation-argument-type'>Float</span>) - a value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>b</span> (<span class='documentation-argument-type'>Float</span>) - b value to convert</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var RGB = new ColorMix.ColorSpace.LabtoRGB(100, 0.00526049995830391, -0.010408184525267927); // { red: 255, green: 255, blue: 255 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.</div>
                                </div>
                            </li>
                            <li class='documentation-method collapsed'>
                                <span data-toggle='collapse' data-target='#documentation-LabtoXYZ'>LabtoXYZ(L, a, b)</span>
                                <div id='documentation-LabtoXYZ' class='collapse'>
                                    <div class='label label-info'>Description</div>
                                    <p class='documentation-description'><i class='icon icon-question-sign'></i> Convert a XYZ color to a Lab one and returns a Lab-color object.</p>
                                    <div class='label label-info'>Arguments</div>
                                    <ul class='documentation-arguments'>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>L</span> (<span class='documentation-argument-type'>Float</span>) - L value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>a</span> (<span class='documentation-argument-type'>Float</span>) - a value to convert</li>
                                        <li class='documentation-argument required'><span class='documentation-argument-name'>b</span> (<span class='documentation-argument-type'>Float</span>) - b value to convert</li>
                                    </ul>
                                    <div class='label label-info'>Example</div>
                                    <pre class='prettyprint linenums' class='documentation-example'>var XYZ = new ColorMix.ColorSpace.LabtoXYZ(100, 0.00526049995830391, -0.010408184525267927); // { x: 95.05, y: 100, z: 108.89999999999996 }</pre>
                                    <div class='documentation-note'><i class='icon icon-info-sign'></i> The invalid values will be replaced by 0.0.</div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </li>
                <li class='documentation-method collapsed'>
                    <h6 data-toggle='collapse' data-target='#documentation-mix'>mix(colors, percents)</h6>
                    <div id='documentation-mix' class='collapse'>
                        <div class='label label-info'>Description</div>
                        <p class='documentation-description'><i class='icon icon-question-sign'></i> Mix an array of colors with corresponding percents</p>
                        <div class='label label-info'>Arguments</div>
                        <ul class='documentation-arguments'>
                            <li class='documentation-argument required'><span class='documentation-argument-name'>colors</span> (<span class='documentation-argument-type'>Array</span>) - ColorMix.Color instances to mix, at leat 1.</li>
                            <li class='documentation-argument required'><span class='documentation-argument-name'>percents</span> (<span class='documentation-argument-type'>Array</span>) - percents integer of each color instance. The sum must be equal to 100.</li>
                        </ul>
                        <div class='label label-info'>Example</div>
<pre class='prettyprint linenums documentation-example'>
var C1 = new ColorMix.Color(0, 152, 204),
C2 = new ColorMix.Color(0, 120, 240),
mix = ColorMix.mix([C1, C2], [50, 50]); // ColorMix.Color { red: 18, green: 136, blue: 222 } --> Average between C1 and C2 in Lab color space
</pre>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> Your parameters should be array of same size.</div>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> The sum of all the 'percents' parameter items should be equal to 100.</div>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> You can of course mix several colors!</div>
                    </div>
                </li>
                <li class='documentation-method collapsed'>
                    <h6 data-toggle='collapse' data-target='#documentation-getGradient'>getGradient()</h6>
                    <div id='documentation-getGradient' class='collapse'>
                        <div class='label label-info'>Description</div>
                        <p class='documentation-description'><i class='icon icon-question-sign'></i> Getter - returns the gradient of the ColorMix.</p>
                        <div class='label label-info'>Example</div>
                        <pre class='prettyprint linenums' class='documentation-example'>var gradient = ColorMix.getGradient(); // [{ reference: (reference), color: (color) }]</pre>
                    </div>
                </li>
                <li class='documentation-method collapsed'>
                    <h6 data-toggle='collapse' data-target='#documentation-setGradient'>setGradient(gradient)</h6>
                    <div id='documentation-setGradient' class='collapse'>
                        <div class='label label-info'>Description</div>
                        <p class='documentation-description'><i class='icon icon-question-sign'></i> Setter - set the gradient for the ColorMix.</p>
                        <div class='label label-info'>Arguments</div>
                        <ul class='documentation-arguments'>
                            <li class='documentation-argument'><span class='documentation-argument-name'>gradient</span> (<span class='documentation-argument-type'>Array</span>) - Gradient items objects. All these objects must have two properties: 'reference', the integer value that will be used to blend, and 'color', a simple RGB object with red, green and blue properties, that will be used for mixing.</li>
                        </ul>
                        <div class='label label-info'>Example</div>
<pre class='prettyprint linenums documentation-example'>
ColorMix.setGradient([
    { reference: -100, color: { red: 0, green: 0, blue: 0 } },
    { reference: 100, color: { red: 255, green: 255, blue: 255 } }
]);
</pre>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> The more detailled the gradient is, the more precise your blending will be.</div>
                    </div>
                </li>
                <li class='documentation-method collapsed'>
                    <h6 data-toggle='collapse' data-target='#documentation-blend'>blend(reference)</h6>
                    <div id='documentation-blend' class='collapse'>
                        <div class='label label-info'>Description</div>
                        <p class='documentation-description'><i class='icon icon-question-sign'></i> Blend a reference with the gradient and returns the mixed color instance.</p>
                        <div class='label label-info'>Arguments</div>
                        <ul class='documentation-arguments'>
                            <li class='documentation-argument required'><span class='documentation-argument-name'>reference</span> (<span class='documentation-argument-type'>Integer</span>) - reference to blend.</li>
                        </ul>
                        <div class='label label-info'>Example</div>
                        <pre class='prettyprint linenums' class='documentation-example'>var blend = ColorMix.blend(50); // ColorMix.Color { red: (red), green: (green), blue: (blue) }</pre>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> This method is directly depending of the gradient you should have set before.</div>
                        <div class='documentation-note'><i class='icon icon-info-sign'></i> If the reference is out of bounds relative to the gradient, the closest limit color of the gradient will be returned.</div>
                    </div>
                </li>
            </ul>
        </div>
    </section>
{% endblock %}
